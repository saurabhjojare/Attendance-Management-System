CREATE TABLE Employees (
    EmployeeID INT AUTO_INCREMENT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    DateOfBirth DATE,
    Gender ENUM('Male', 'Female', 'Other'),
    Department VARCHAR(100),
    JoiningDate DATE,
    Salary DECIMAL(10, 2),
    CONSTRAINT uc_EmployeeID UNIQUE (EmployeeID)
);


1NF: Each column contains atomic values. Yes, each column represents a single attribute.
2NF: No partial dependencies. Yes, there are no composite primary keys, so no partial dependencies.
3NF: No transitive dependencies. Yes, all non-key attributes are directly dependent on the primary key.


---------------------------------------------------------------------------------------------------------

CREATE TABLE Departments (
    DepartmentID INT AUTO_INCREMENT PRIMARY KEY,
    DepartmentName VARCHAR(100)
);


1NF: Each column contains atomic values. Yes, each column represents a single attribute.
2NF: No partial dependencies. Yes, it's a simple table with a single primary key (DepartmentID).
3NF: No transitive dependencies. Yes, there are no non-key attributes to cause transitive dependency.

---------------------------------------------------------------------------------------------------------


CREATE TABLE Attendance (
    AttendanceID INT AUTO_INCREMENT PRIMARY KEY,
    EmployeeID INT,
    AttendanceDate DATE,
    Status ENUM('Present', 'Absent'),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);


1NF: Each column contains atomic values. Yes, each column represents a single attribute.
2NF: No partial dependencies. Yes, there are no composite primary keys, so no partial dependencies.
3NF: No transitive dependencies. Yes, all non-key attributes are directly dependent on the primary key.


---------------------------------------------------------------------------------------------------------


CREATE TABLE Salary (
    SalaryID INT AUTO_INCREMENT PRIMARY KEY,
    EmployeeID INT,
    SalaryDate DATE,
    GrossSalary DECIMAL(10, 2),
    Deductions DECIMAL(10, 2),
    NetSalary DECIMAL(10, 2),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);

1NF: Each column contains atomic values. Yes, each column represents a single attribute.
2NF: No partial dependencies. Yes, there are no composite primary keys, so no partial dependencies.
3NF: No transitive dependencies. Yes, all non-key attributes are directly dependent on the primary key.


---------------------------------------------------------------------------------------------------------


CREATE TABLE EmployeeBonus (
    BonusID INT AUTO_INCREMENT PRIMARY KEY,
    EmployeeID INT,
    BonusDate DATE,
    Amount DECIMAL(10, 2),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);

1NF: Each column contains atomic values. Yes, each column represents a single attribute.
2NF: No partial dependencies. Yes, there are no composite primary keys, so no partial dependencies.
3NF: No transitive dependencies. Yes, all non-key attributes are directly dependent on the primary key.


---------------------------------------------------------------------------------------------------------


CREATE TABLE Employees_Departments (
    EmployeeID INT,
    DepartmentID INT,
    PRIMARY KEY (EmployeeID, DepartmentID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

1NF: Each column contains atomic values. Yes, each column represents a single attribute.
2NF: No partial dependencies. Yes, both EmployeeID and DepartmentID are part of the composite primary key, and there are no partial dependencies.
3NF: No transitive dependencies. Yes, there are no transitive dependencies, as each non-key attribute is directly dependent on the primary key. This table is already in 3NF.

---------------------------------------------------------------------------------------------------------

CREATE TABLE Employees_Roles (
    EmployeeID INT,
    RoleID INT,
    PRIMARY KEY (EmployeeID, RoleID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (RoleID) REFERENCES Roles(RoleID)
);


1NF: Each column contains atomic values. Yes, each column represents a single attribute.
2NF: No partial dependencies. Yes, both EmployeeID and RoleID are part of the composite primary key, and there are no partial dependencies.
3NF: No transitive dependencies. Yes, there are no transitive dependencies, as each non-key attribute is directly dependent on the primary key. This table is already in 3NF.

---------------------------------------------------------------------------------------------------------

CREATE TABLE Roles (
    RoleID INT AUTO_INCREMENT PRIMARY KEY,
    RoleName VARCHAR(100)
);


1NF: Each column contains atomic values. Yes, each column (RoleID, RoleName) represents a single attribute, and there are no repeating groups.

2NF: There are no partial dependencies. Yes, the table has a single primary key (RoleID), and RoleName depends on the entire primary key. There are no composite keys, so there are no partial dependencies.

3NF: There are no transitive dependencies. Yes, there is only one non-key attribute (RoleName), and it depends solely on the primary key (RoleID). There are no other non-key attributes to cause transitive dependencies.

---------------------------------------------------------------------------------------------------------

Here's how the tables are connected:

Employees:

Connected to Attendance through the EmployeeID foreign key.
Connected to Salary through the EmployeeID foreign key.
Connected to EmployeeBonus through the EmployeeID foreign key.
Connected to Departments_Departments through the EmployeeID foreign key.
Connected to Employees_Roles through the EmployeeID foreign key.
Departments:

Connected to Employees_Departments through the DepartmentID primary key.
Roles:

Connected to Employees_Roles through the RoleID primary key.
Attendance:

Connected to Employees through the EmployeeID foreign key.
Salary:

Connected to Employees through the EmployeeID foreign key.
EmployeeBonus:

Connected to Employees through the EmployeeID foreign key.
Employees_Departments:

Connected to Employees through the EmployeeID primary key.
Connected to Departments through the DepartmentID primary key.
Employees_Roles:

Connected to Employees through the EmployeeID primary key.
Connected to Roles through the RoleID primary key.